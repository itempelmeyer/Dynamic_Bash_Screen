#!/bin/bash

echo ""
echo "Hostname : $(hostname)"
echo "Uptime   : $(uptime -p)"
echo "CPU Temp : $(vcgencmd measure_temp | cut -d '=' -f2)"
echo ""

# === Function to determine IP assignment method ===
get_ip_method() {
    local iface=$1
    if [ -f "/var/lib/dhcpcd5/dhcpcd-${iface}.lease" ]; then
        echo "DHCP"
    elif grep -q "interface ${iface}" /etc/dhcpcd.conf 2>/dev/null; then
        grep -A4 "interface ${iface}" /etc/dhcpcd.conf | grep -q "static" && echo "Static" || echo "Unknown"
    elif systemctl is-active systemd-networkd &>/dev/null; then
        local lease_file="/run/systemd/netif/leases/*"
        grep -q "$iface" $lease_file 2>/dev/null && echo "DHCP" || echo "Static?"
    else
        echo "Unknown"
    fi
}

# === Get public IP, Geo, ISP ===
ipinfo=$(curl -s --max-time 2 https://ipinfo.io/json)
public_ip=$(echo "$ipinfo" | jq -r '.ip // "Unavailable"')
city=$(echo "$ipinfo" | jq -r '.city // empty')
region=$(echo "$ipinfo" | jq -r '.region // empty')
country=$(echo "$ipinfo" | jq -r '.country // empty')
org=$(echo "$ipinfo" | jq -r '.org // "Unknown ISP"')
geo_string="$city, $region, $country"
geo_string=$(echo "$geo_string" | sed 's/^, //;s/, ,/,/g;s/,$//')

echo "Public IP: $public_ip"
echo "Location : ${geo_string:-Unavailable}"
echo "ISP      : $org"
echo ""
echo "Network Interfaces:"

# === Interface sorting ===
default_iface=$(ip route | awk '/default/ {print $5}' | head -n1)
noncan_ifaces=()
eth_iface=""
wlan_iface=""
can_ifaces=()

for iface in $(ls /sys/class/net/); do
    if [[ "$iface" == can* ]]; then
        can_ifaces+=("$iface")
    elif [[ "$iface" == "wlan0" ]]; then
        wlan_iface="$iface"
    elif [[ "$iface" == "eth0" ]]; then
        eth_iface="$iface"
    else
        noncan_ifaces+=("$iface")
    fi
done

# === Final iface ordering ===
all_ifaces=()
[ -n "$wlan_iface" ] && all_ifaces+=("$wlan_iface")
all_ifaces+=("${noncan_ifaces[@]}")
[ -n "$eth_iface" ] && all_ifaces+=("$eth_iface")
all_ifaces+=("${can_ifaces[@]}")

# === Print info for each interface ===
for iface in "${all_ifaces[@]}"; do
    state=$(cat /sys/class/net/"$iface"/operstate 2>/dev/null)
    ip_addr=$(ip -o -4 addr show "$iface" | awk '{print $4}')
    [ -z "$ip_addr" ] && ip_addr="N/A"
    rx=$(cat /sys/class/net/"$iface"/statistics/rx_bytes 2>/dev/null || echo 0)
    tx=$(cat /sys/class/net/"$iface"/statistics/tx_bytes 2>/dev/null || echo 0)
    rx_human=$(numfmt --to=iec "$rx")
    tx_human=$(numfmt --to=iec "$tx")
    [ "$iface" = "$default_iface" ] && internet="->" || internet="  "

    if [[ "$iface" == can* ]]; then
        can_line=$(ip -details link show "$iface" | tr '\n' ' ' | tr -s ' ')
        link_state=$(echo "$can_line" | grep -oP 'state \K\w+' | head -n1)
        can_state=$(echo "$can_line" | grep -oP 'can .*state \K\S+' | sed 's/^ERROR-//')
        bitrate=$(echo "$can_line" | grep -oP 'bitrate \K[0-9]+')
        loopback=$(echo "$can_line" | grep -q '<LOOPBACK>' && echo ", loopback" || echo "")
        extra="[$link_state, $can_state$loopback]"
        display_field="${bitrate:-N/A}bps"
    else
        ip_method=$(get_ip_method "$iface")
        extra="[$state, $ip_method]"
        display_field="$ip_addr"
    fi

    printf "%-2s%-8s%-18s RX: %-6s TX: %-6s %s\n" "$internet" "$iface" "$display_field" "$rx_human" "$tx_human" "$extra"
done
